# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{

  # Containers
  virtualisation.oci-containers.containers."jellyfin" = {
    image = "lscr.io/linuxserver/jellyfin:latest";
    environment = {
      "JELLYFIN_CONFIG_DIR" = "/config";
      "PGID" = "1000";
      "PUID" = "1000";
      "TZ" = "Etc/UTC";
    };
    devices = ["/dev/dri:/dev/dri/"];
    volumes = [
      "/mnt/data/jellyfin/config:/config:rw"
      "/mnt/data/mass_storage/lectures:/data/lectures:rw"
      "/mnt/data/radarr_storage:/data/movies:rw"
      "/mnt/data/mass_storage/sonarr:/data/tvshows:rw"
      "/mnt/data/mass_storage/thisissynthwave:/data/synthwave:rw"
    ];
    ports = [
      "8097:8097/tcp"
      "7360:7359/udp"
      "1901:1900/udp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=jellyfin"
      "--network=jellyfin_default"
    ];
  };
  systemd.services."docker-jellyfin" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-jellyfin_default.service"
    ];
    requires = [
      "docker-network-jellyfin_default.service"
    ];
    partOf = [
      "docker-compose-jellyfin-root.target"
    ];
    wantedBy = [
      "docker-compose-jellyfin-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-jellyfin_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f jellyfin_default";
    };
    script = ''
      docker network inspect jellyfin_default || docker network create jellyfin_default
    '';
    partOf = [ "docker-compose-jellyfin-root.target" ];
    wantedBy = [ "docker-compose-jellyfin-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-jellyfin-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
