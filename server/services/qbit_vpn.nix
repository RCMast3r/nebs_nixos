# Auto-generated using compose2nix v0.3.1.
{ config, pkgs, lib, ... }:
{

  # Containers
  virtualisation.oci-containers.containers."qbittorrent" = {
    image = "lscr.io/linuxserver/qbittorrent:latest";
    environment = {
      "PGID" = "1000";
      "PUID" = "1000";
      "TZ" = "Etc/UTC";
      "WEBUI_PORT" = "8081";
    };
    volumes = [
      "/mnt/data/mass_storage/books_downloads:/books:rw"
      "/mnt/data/mass_storage/media_server_movies:/movies:rw"
      "/mnt/data/mass_storage/media_server_tv:/downloads/tvdownloads:rw"
      "/mnt/data/mass_storage/qbit_downloads_migrated/:/media/externalboi/qbit_downloads_migrated:rw"
      "/mnt/data/qbt_config:/config:rw"
    ];
    dependsOn = [
      "vpn"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:vpn"
    ];
  };
  systemd.services."docker-qbittorrent" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    partOf = [
      "docker-compose-qbit-root.target"
    ];
    wantedBy = [
      "docker-compose-qbit-root.target"
    ];
  };
  virtualisation.oci-containers.containers."vpn" = {
    image = "qmcgaw/gluetun";
    environment = {
      "FIREWALL_OUTBOUND_SUBNETS" = "192.168.86.0/24";
      "HTTPPROXY" = "on";
      "SERVER_REGIONS" = "US Atlanta";
      "VPN_SERVICE_PROVIDER" = "private internet access";
    };
    # "OPENVPN_PASSWORD" = "deleteme";
    # "OPENVPN_USER" = "deleteme";
    environmentFiles = [ config.age.secrets.qbit-vpn-env.path ];
    ports = [
      "8001:8000/tcp"
      "8888:8888/tcp"
      "9091:9091/tcp"
      "51413:51413/tcp"
      "51413:51413/udp"
      "8081:8081/tcp"
      "51000:51000/tcp"
      "51000:51000/udp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--network-alias=vpn"
      "--network=qbit_default"
    ];
  };
  systemd.services."docker-vpn" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-qbit_default.service"
    ];
    requires = [
      "docker-network-qbit_default.service"
    ];
    partOf = [
      "docker-compose-qbit-root.target"
    ];
    wantedBy = [
      "docker-compose-qbit-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-qbit_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f qbit_default";
    };
    script = ''
      docker network inspect qbit_default || docker network create qbit_default
    '';
    partOf = [ "docker-compose-qbit-root.target" ];
    wantedBy = [ "docker-compose-qbit-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-qbit-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
