# Auto-generated using compose2nix v0.3.1.
{ config, pkgs, lib, ... }:

{

  # Containers
  virtualisation.oci-containers.containers."unpackerr" = {
    image = "golift/unpackerr";
    environment = {
      "TZ" = "Etc/UTC";
      "UN_DEBUG" = "false";
      "UN_DIR_MODE" = "0755";
      "UN_FILE_MODE" = "0644";
      "UN_FOLDER_0_DELETE_AFTER" = "10m";
      "UN_FOLDER_0_DELETE_FILES" = "false";
      "UN_FOLDER_0_DELETE_ORIGINAL" = "false";
      "UN_FOLDER_0_MOVE_BACK" = "false";
      "UN_FOLDER_0_PATH" = "/other";
      "UN_INTERVAL" = "2m";
      "UN_LOG_FILE" = "";
      "UN_LOG_FILES" = "10";
      "UN_LOG_FILE_MB" = "10";
      "UN_MAX_RETRIES" = "3";
      "UN_PARALLEL" = "1";
      "UN_RADARR_0_DELETE_DELAY" = "5m";
      "UN_RADARR_0_DELETE_ORIG" = "false";
      "UN_RADARR_0_PATHS_0" = "/movies";
      "UN_RADARR_0_PROTOCOLS" = "torrent";
      "UN_RADARR_0_TIMEOUT" = "10s";
      "UN_RADARR_0_URL" = "http://movies.yeet";
      "UN_RETRY_DELAY" = "5m";
      "UN_SONARR_0_DELETE_DELAY" = "5m";
      "UN_SONARR_0_DELETE_ORIG" = "false";
      "UN_SONARR_0_PATHS_0" = "/downloads/tvdownloads";
      "UN_SONARR_0_PROTOCOLS" = "torrent";
      "UN_SONARR_0_TIMEOUT" = "10s";
      "UN_SONARR_0_URL" = "http://tv.yeet";
      "UN_START_DELAY" = "1m";
    };
    # "UN_RADARR_0_API_KEY" = "deleteme";
    # "UN_SONARR_0_API_KEY" = "deleteme";
    environmentFiles = [ config.age.secrets.unpackerr-env.path ];
    volumes = [
      "/mnt/data/mass_storage/media_server_movies:/movies:rw"
      "/mnt/data/mass_storage/media_server_tv:/downloads/tvdownloads:rw"
      "/mnt/data/mass_storage/qbit_downloads_migrated:/other:rw"
    ];
    user = ":";
    log-driver = "journald";
    extraOptions = [
      "--network-alias=unpackerr"
      "--network=qbit_default"
      "--security-opt=no-new-privileges:true"
    ];
  };
  systemd.services."docker-unpackerr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-qbit_default.service"
    ];
    requires = [
      "docker-network-qbit_default.service"
    ];
    partOf = [
      "docker-compose-qbit-root.target"
    ];
    wantedBy = [
      "docker-compose-qbit-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-qbit_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f qbit_default";
    };
    script = ''
      docker network inspect qbit_default || docker network create qbit_default
    '';
    partOf = [ "docker-compose-qbit-root.target" ];
    wantedBy = [ "docker-compose-qbit-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-qbit-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
