# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Containers
  virtualisation.oci-containers.containers."twitch-miner" = {
    image = "rdavidoff/twitch-channel-points-miner-v2";
    environment = {
      "TERM" = "xterm-256color";
    };
    volumes = [
      "/mnt/data/twitch_channel_point_miner/analytics:/usr/src/app/analytics:rw"
      "/mnt/data/twitch_channel_point_miner/cookies:/usr/src/app/cookies:rw"
      "/mnt/data/twitch_channel_point_miner/logs:/usr/src/app/logs:rw"
      "/mnt/data/twitch_channel_point_miner/run.py:/usr/src/app/run.py:ro"
    ];
    ports = [
      "6030:5000/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=miner"
      "--network=twitch_default"
    ];
  };
  systemd.services."docker-twitch-miner" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-twitch_default.service"
    ];
    requires = [
      "docker-network-twitch_default.service"
    ];
    partOf = [
      "docker-compose-twitch-root.target"
    ];
    wantedBy = [
      "docker-compose-twitch-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-twitch_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f twitch_default";
    };
    script = ''
      docker network inspect twitch_default || docker network create twitch_default
    '';
    partOf = [ "docker-compose-twitch-root.target" ];
    wantedBy = [ "docker-compose-twitch-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-twitch-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
